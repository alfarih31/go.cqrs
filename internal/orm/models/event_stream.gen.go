// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package models

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/jetbasrawi/go.cqrs/internal/orm/model"
)

func newEventStream(db *gorm.DB, opts ...gen.DOOption) eventStream {
	_eventStream := eventStream{}

	_eventStream.eventStreamDo.UseDB(db, opts...)
	_eventStream.eventStreamDo.UseModel(&model.EventStream{})

	tableName := _eventStream.eventStreamDo.TableName()
	_eventStream.ALL = field.NewAsterisk(tableName)
	_eventStream.ID = field.NewInt64(tableName, "id")
	_eventStream.StreamID = field.NewString(tableName, "stream_id")
	_eventStream.StreamVersion = field.NewInt32(tableName, "stream_version")
	_eventStream.EventID = field.NewString(tableName, "event_id")
	_eventStream.CreatedAt = field.NewTime(tableName, "created_at")
	_eventStream.Event = eventStreamBelongsToEvent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Event", "model.EventStore"),
		EventStreams: struct {
			field.RelationField
			Event struct {
				field.RelationField
				EventStreams struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Event.EventStreams", "model.EventStream"),
			Event: struct {
				field.RelationField
				EventStreams struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Event.EventStreams.Event", "model.EventStore"),
				EventStreams: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Event.EventStreams.Event.EventStreams", "model.EventStream"),
				},
			},
		},
	}

	_eventStream.fillFieldMap()

	return _eventStream
}

type eventStream struct {
	eventStreamDo

	ALL           field.Asterisk
	ID            field.Int64
	StreamID      field.String
	StreamVersion field.Int32
	EventID       field.String
	CreatedAt     field.Time
	Event         eventStreamBelongsToEvent

	fieldMap map[string]field.Expr
}

func (e eventStream) Table(newTableName string) *eventStream {
	e.eventStreamDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eventStream) As(alias string) *eventStream {
	e.eventStreamDo.DO = *(e.eventStreamDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eventStream) updateTableName(table string) *eventStream {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.StreamID = field.NewString(table, "stream_id")
	e.StreamVersion = field.NewInt32(table, "stream_version")
	e.EventID = field.NewString(table, "event_id")
	e.CreatedAt = field.NewTime(table, "created_at")

	e.fillFieldMap()

	return e
}

func (e *eventStream) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eventStream) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 6)
	e.fieldMap["id"] = e.ID
	e.fieldMap["stream_id"] = e.StreamID
	e.fieldMap["stream_version"] = e.StreamVersion
	e.fieldMap["event_id"] = e.EventID
	e.fieldMap["created_at"] = e.CreatedAt

}

func (e eventStream) clone(db *gorm.DB) eventStream {
	e.eventStreamDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e eventStream) replaceDB(db *gorm.DB) eventStream {
	e.eventStreamDo.ReplaceDB(db)
	return e
}

type eventStreamBelongsToEvent struct {
	db *gorm.DB

	field.RelationField

	EventStreams struct {
		field.RelationField
		Event struct {
			field.RelationField
			EventStreams struct {
				field.RelationField
			}
		}
	}
}

func (a eventStreamBelongsToEvent) Where(conds ...field.Expr) *eventStreamBelongsToEvent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a eventStreamBelongsToEvent) WithContext(ctx context.Context) *eventStreamBelongsToEvent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a eventStreamBelongsToEvent) Model(m *model.EventStream) *eventStreamBelongsToEventTx {
	return &eventStreamBelongsToEventTx{a.db.Model(m).Association(a.Name())}
}

type eventStreamBelongsToEventTx struct{ tx *gorm.Association }

func (a eventStreamBelongsToEventTx) Find() (result *model.EventStore, err error) {
	return result, a.tx.Find(&result)
}

func (a eventStreamBelongsToEventTx) Append(values ...*model.EventStore) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a eventStreamBelongsToEventTx) Replace(values ...*model.EventStore) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a eventStreamBelongsToEventTx) Delete(values ...*model.EventStore) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a eventStreamBelongsToEventTx) Clear() error {
	return a.tx.Clear()
}

func (a eventStreamBelongsToEventTx) Count() int64 {
	return a.tx.Count()
}

type eventStreamDo struct{ gen.DO }

type IEventStreamDo interface {
	gen.SubQuery
	Debug() IEventStreamDo
	WithContext(ctx context.Context) IEventStreamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IEventStreamDo
	WriteDB() IEventStreamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IEventStreamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IEventStreamDo
	Not(conds ...gen.Condition) IEventStreamDo
	Or(conds ...gen.Condition) IEventStreamDo
	Select(conds ...field.Expr) IEventStreamDo
	Where(conds ...gen.Condition) IEventStreamDo
	Order(conds ...field.Expr) IEventStreamDo
	Distinct(cols ...field.Expr) IEventStreamDo
	Omit(cols ...field.Expr) IEventStreamDo
	Join(table schema.Tabler, on ...field.Expr) IEventStreamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IEventStreamDo
	RightJoin(table schema.Tabler, on ...field.Expr) IEventStreamDo
	Group(cols ...field.Expr) IEventStreamDo
	Having(conds ...gen.Condition) IEventStreamDo
	Limit(limit int) IEventStreamDo
	Offset(offset int) IEventStreamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IEventStreamDo
	Unscoped() IEventStreamDo
	Create(values ...*model.EventStream) error
	CreateInBatches(values []*model.EventStream, batchSize int) error
	Save(values ...*model.EventStream) error
	First() (*model.EventStream, error)
	Take() (*model.EventStream, error)
	Last() (*model.EventStream, error)
	Find() ([]*model.EventStream, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventStream, err error)
	FindInBatches(result *[]*model.EventStream, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.EventStream) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IEventStreamDo
	Assign(attrs ...field.AssignExpr) IEventStreamDo
	Joins(fields ...field.RelationField) IEventStreamDo
	Preload(fields ...field.RelationField) IEventStreamDo
	FirstOrInit() (*model.EventStream, error)
	FirstOrCreate() (*model.EventStream, error)
	FindByPage(offset int, limit int) (result []*model.EventStream, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IEventStreamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e eventStreamDo) Debug() IEventStreamDo {
	return e.withDO(e.DO.Debug())
}

func (e eventStreamDo) WithContext(ctx context.Context) IEventStreamDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eventStreamDo) ReadDB() IEventStreamDo {
	return e.Clauses(dbresolver.Read)
}

func (e eventStreamDo) WriteDB() IEventStreamDo {
	return e.Clauses(dbresolver.Write)
}

func (e eventStreamDo) Session(config *gorm.Session) IEventStreamDo {
	return e.withDO(e.DO.Session(config))
}

func (e eventStreamDo) Clauses(conds ...clause.Expression) IEventStreamDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eventStreamDo) Returning(value interface{}, columns ...string) IEventStreamDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eventStreamDo) Not(conds ...gen.Condition) IEventStreamDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eventStreamDo) Or(conds ...gen.Condition) IEventStreamDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eventStreamDo) Select(conds ...field.Expr) IEventStreamDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eventStreamDo) Where(conds ...gen.Condition) IEventStreamDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eventStreamDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IEventStreamDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e eventStreamDo) Order(conds ...field.Expr) IEventStreamDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eventStreamDo) Distinct(cols ...field.Expr) IEventStreamDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eventStreamDo) Omit(cols ...field.Expr) IEventStreamDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eventStreamDo) Join(table schema.Tabler, on ...field.Expr) IEventStreamDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eventStreamDo) LeftJoin(table schema.Tabler, on ...field.Expr) IEventStreamDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eventStreamDo) RightJoin(table schema.Tabler, on ...field.Expr) IEventStreamDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eventStreamDo) Group(cols ...field.Expr) IEventStreamDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eventStreamDo) Having(conds ...gen.Condition) IEventStreamDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eventStreamDo) Limit(limit int) IEventStreamDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eventStreamDo) Offset(offset int) IEventStreamDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eventStreamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IEventStreamDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eventStreamDo) Unscoped() IEventStreamDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eventStreamDo) Create(values ...*model.EventStream) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eventStreamDo) CreateInBatches(values []*model.EventStream, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eventStreamDo) Save(values ...*model.EventStream) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eventStreamDo) First() (*model.EventStream, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventStream), nil
	}
}

func (e eventStreamDo) Take() (*model.EventStream, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventStream), nil
	}
}

func (e eventStreamDo) Last() (*model.EventStream, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventStream), nil
	}
}

func (e eventStreamDo) Find() ([]*model.EventStream, error) {
	result, err := e.DO.Find()
	return result.([]*model.EventStream), err
}

func (e eventStreamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.EventStream, err error) {
	buf := make([]*model.EventStream, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eventStreamDo) FindInBatches(result *[]*model.EventStream, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eventStreamDo) Attrs(attrs ...field.AssignExpr) IEventStreamDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eventStreamDo) Assign(attrs ...field.AssignExpr) IEventStreamDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eventStreamDo) Joins(fields ...field.RelationField) IEventStreamDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eventStreamDo) Preload(fields ...field.RelationField) IEventStreamDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eventStreamDo) FirstOrInit() (*model.EventStream, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventStream), nil
	}
}

func (e eventStreamDo) FirstOrCreate() (*model.EventStream, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.EventStream), nil
	}
}

func (e eventStreamDo) FindByPage(offset int, limit int) (result []*model.EventStream, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eventStreamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eventStreamDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eventStreamDo) Delete(models ...*model.EventStream) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eventStreamDo) withDO(do gen.Dao) *eventStreamDo {
	e.DO = *do.(*gen.DO)
	return e
}
